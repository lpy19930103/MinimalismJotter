package com.lipy.jotter.dao.daocore;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NOTE.
*/
public class NoteDao extends AbstractDao<Note, Long> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Note_id = new Property(1, Integer.class, "note_id", false, "NOTE_ID");
        public final static Property Guid = new Property(2, String.class, "guid", false, "GUID");
        public final static Property Status = new Property(3, Integer.class, "status", false, "STATUS");
        public final static Property Type = new Property(4, Integer.class, "type", false, "TYPE");
        public final static Property Label = new Property(5, String.class, "label", false, "LABEL");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
        public final static Property ImagePath = new Property(7, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property VoicePath = new Property(8, String.class, "voicePath", false, "VOICE_PATH");
        public final static Property CreateTime = new Property(9, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property LastOprTime = new Property(10, Long.class, "lastOprTime", false, "LAST_OPR_TIME");
    };


    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NOTE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NOTE_ID' INTEGER," + // 1: note_id
                "'GUID' TEXT," + // 2: guid
                "'STATUS' INTEGER," + // 3: status
                "'TYPE' INTEGER," + // 4: type
                "'LABEL' TEXT," + // 5: label
                "'CONTENT' TEXT," + // 6: content
                "'IMAGE_PATH' TEXT," + // 7: imagePath
                "'VOICE_PATH' TEXT," + // 8: voicePath
                "'CREATE_TIME' INTEGER," + // 9: createTime
                "'LAST_OPR_TIME' INTEGER);"); // 10: lastOprTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer note_id = entity.getNote_id();
        if (note_id != null) {
            stmt.bindLong(2, note_id);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(3, guid);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(4, status);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(5, type);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(6, label);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(8, imagePath);
        }
 
        String voicePath = entity.getVoicePath();
        if (voicePath != null) {
            stmt.bindString(9, voicePath);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(10, createTime);
        }
 
        Long lastOprTime = entity.getLastOprTime();
        if (lastOprTime != null) {
            stmt.bindLong(11, lastOprTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // note_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // guid
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // status
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // label
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // imagePath
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // voicePath
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // createTime
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // lastOprTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNote_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setGuid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setLabel(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImagePath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVoicePath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreateTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setLastOprTime(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
